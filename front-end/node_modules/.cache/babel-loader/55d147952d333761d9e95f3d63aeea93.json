{"ast":null,"code":"const base64url = require('base64url');\n/**\n * Converts PublicKeyCredential into serialised JSON\n * @param  {Object} pubKeyCred\n * @return {Object}            - JSON encoded publicKeyCredential\n */\n\n\nexport var publicKeyCredentialToJSON = pubKeyCred => {\n  if (pubKeyCred instanceof Array) {\n    let arr = [];\n\n    for (let i of pubKeyCred) arr.push(publicKeyCredentialToJSON(i));\n\n    return arr;\n  }\n\n  if (pubKeyCred instanceof ArrayBuffer) {\n    return base64url.encode(pubKeyCred);\n  }\n\n  if (pubKeyCred instanceof Object) {\n    let obj = {};\n\n    for (let key in pubKeyCred) {\n      obj[key] = publicKeyCredentialToJSON(pubKeyCred[key]);\n    }\n\n    return obj;\n  }\n\n  return pubKeyCred;\n};\n/**\n * Generate secure random buffer\n * @param  {Number} len - Length of the buffer (default 32 bytes)\n * @return {Uint8Array} - random string\n */\n\nexport var generateRandomBuffer = len => {\n  len = len || 32;\n  let randomBuffer = new Uint8Array(len);\n  window.crypto.getRandomValues(randomBuffer);\n  return randomBuffer;\n};\n/**\n * Decodes arrayBuffer required fields.\n */\n\nexport var preformatMakeCredReq = makeCredReq => {\n  makeCredReq.challenge = base64url.decode(makeCredReq.challenge);\n  makeCredReq.user.id = base64url.decode(makeCredReq.user.id);\n  return makeCredReq;\n};\n/**\n * Decodes arrayBuffer required fields.\n */\n\nexport var preformatGetAssertReq = getAssert => {\n  getAssert.challenge = base64url.decode(getAssert.challenge);\n\n  for (let allowCred of getAssert.allowCredentials) {\n    allowCred.id = base64url.decode(allowCred.id);\n  }\n\n  return getAssert;\n};","map":{"version":3,"sources":["/Users/wongweijie/Citi-Hackathon/citi-ezVerify/front-end/src/WebAuthn/utils.js"],"names":["base64url","require","publicKeyCredentialToJSON","pubKeyCred","Array","arr","i","push","ArrayBuffer","encode","Object","obj","key","generateRandomBuffer","len","randomBuffer","Uint8Array","window","crypto","getRandomValues","preformatMakeCredReq","makeCredReq","challenge","decode","user","id","preformatGetAssertReq","getAssert","allowCred","allowCredentials"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;AAEA;;;;;;;AAKA,OAAO,IAAIC,yBAAyB,GAAIC,UAAD,IAAgB;AACnD,MAAGA,UAAU,YAAYC,KAAzB,EAAgC;AAC5B,QAAIC,GAAG,GAAG,EAAV;;AACA,SAAI,IAAIC,CAAR,IAAaH,UAAb,EACIE,GAAG,CAACE,IAAJ,CAASL,yBAAyB,CAACI,CAAD,CAAlC;;AAEJ,WAAOD,GAAP;AACH;;AAED,MAAGF,UAAU,YAAYK,WAAzB,EAAsC;AAClC,WAAOR,SAAS,CAACS,MAAV,CAAiBN,UAAjB,CAAP;AACH;;AAED,MAAGA,UAAU,YAAYO,MAAzB,EAAiC;AAC7B,QAAIC,GAAG,GAAG,EAAV;;AAEA,SAAK,IAAIC,GAAT,IAAgBT,UAAhB,EAA4B;AACxBQ,MAAAA,GAAG,CAACC,GAAD,CAAH,GAAWV,yBAAyB,CAACC,UAAU,CAACS,GAAD,CAAX,CAApC;AACH;;AAED,WAAOD,GAAP;AACH;;AAED,SAAOR,UAAP;AACH,CAxBM;AA0BP;;;;;;AAKA,OAAO,IAAIU,oBAAoB,GAAIC,GAAD,IAAS;AACvCA,EAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;AAEA,MAAIC,YAAY,GAAG,IAAIC,UAAJ,CAAeF,GAAf,CAAnB;AACAG,EAAAA,MAAM,CAACC,MAAP,CAAcC,eAAd,CAA8BJ,YAA9B;AAEA,SAAOA,YAAP;AACH,CAPM;AASP;;;;AAGA,OAAO,IAAIK,oBAAoB,GAAIC,WAAD,IAAiB;AAC/CA,EAAAA,WAAW,CAACC,SAAZ,GAAwBtB,SAAS,CAACuB,MAAV,CAAiBF,WAAW,CAACC,SAA7B,CAAxB;AACAD,EAAAA,WAAW,CAACG,IAAZ,CAAiBC,EAAjB,GAAsBzB,SAAS,CAACuB,MAAV,CAAiBF,WAAW,CAACG,IAAZ,CAAiBC,EAAlC,CAAtB;AAEA,SAAOJ,WAAP;AACH,CALM;AAOP;;;;AAGA,OAAO,IAAIK,qBAAqB,GAAIC,SAAD,IAAe;AAC9CA,EAAAA,SAAS,CAACL,SAAV,GAAsBtB,SAAS,CAACuB,MAAV,CAAiBI,SAAS,CAACL,SAA3B,CAAtB;;AAEA,OAAI,IAAIM,SAAR,IAAqBD,SAAS,CAACE,gBAA/B,EAAiD;AAC7CD,IAAAA,SAAS,CAACH,EAAV,GAAezB,SAAS,CAACuB,MAAV,CAAiBK,SAAS,CAACH,EAA3B,CAAf;AACH;;AAED,SAAOE,SAAP;AACH,CARM","sourcesContent":["const base64url = require('base64url');\n\n/**\n * Converts PublicKeyCredential into serialised JSON\n * @param  {Object} pubKeyCred\n * @return {Object}            - JSON encoded publicKeyCredential\n */\nexport var publicKeyCredentialToJSON = (pubKeyCred) => {\n    if(pubKeyCred instanceof Array) {\n        let arr = [];\n        for(let i of pubKeyCred)\n            arr.push(publicKeyCredentialToJSON(i));\n\n        return arr\n    }\n\n    if(pubKeyCred instanceof ArrayBuffer) {\n        return base64url.encode(pubKeyCred)\n    }\n\n    if(pubKeyCred instanceof Object) {\n        let obj = {};\n\n        for (let key in pubKeyCred) {\n            obj[key] = publicKeyCredentialToJSON(pubKeyCred[key])\n        }\n\n        return obj\n    }\n\n    return pubKeyCred\n}\n\n/**\n * Generate secure random buffer\n * @param  {Number} len - Length of the buffer (default 32 bytes)\n * @return {Uint8Array} - random string\n */\nexport var generateRandomBuffer = (len) => {\n    len = len || 32;\n\n    let randomBuffer = new Uint8Array(len);\n    window.crypto.getRandomValues(randomBuffer);\n\n    return randomBuffer\n}\n\n/**\n * Decodes arrayBuffer required fields.\n */\nexport var preformatMakeCredReq = (makeCredReq) => {\n    makeCredReq.challenge = base64url.decode(makeCredReq.challenge);\n    makeCredReq.user.id = base64url.decode(makeCredReq.user.id);\n\n    return makeCredReq\n}\n\n/**\n * Decodes arrayBuffer required fields.\n */\nexport var preformatGetAssertReq = (getAssert) => {\n    getAssert.challenge = base64url.decode(getAssert.challenge);\n    \n    for(let allowCred of getAssert.allowCredentials) {\n        allowCred.id = base64url.decode(allowCred.id);\n    }\n\n    return getAssert\n}"]},"metadata":{},"sourceType":"module"}
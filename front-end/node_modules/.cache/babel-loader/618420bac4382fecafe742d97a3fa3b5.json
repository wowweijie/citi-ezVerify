{"ast":null,"code":"'use strict';\n\nimport { publicKeyCredentialToJSON, generateRandomBuffer, preformatMakeCredReq, preformatGetAssertReq } from './utils';\n\nlet getMakeCredentialsChallenge = formBody => {\n  return fetch('/webauthn/register', {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(formBody)\n  }).then(response => response.json()).then(response => {\n    if (response.status !== 'ok') throw new Error(`Server responed with error. The message is: ${response.message}`);\n    return response;\n  });\n};\n\nlet sendWebAuthnResponse = body => {\n  return fetch('/webauthn/response', {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  }).then(response => response.json()).then(response => {\n    if (response.status !== 'ok') throw new Error(`Server responed with error. The message is: ${response.message}`);\n    return response;\n  });\n};\n/* Handle for register form submission */\n\n\nexport const makeCredentials = (event, username) => {\n  event.preventDefault(); // let username = this.username.value;\n  // let name     = this.name.value;\n\n  if (!username) {\n    alert('Name or username is missing!');\n    return;\n  }\n\n  getMakeCredentialsChallenge({\n    username\n  }).then(response => {\n    let publicKey = preformatMakeCredReq(response);\n    return navigator.credentials.create({\n      publicKey\n    });\n  }).then(response => {\n    console.log(\"response: \", response);\n    let makeCredResponse = publicKeyCredentialToJSON(response);\n    return sendWebAuthnResponse(makeCredResponse);\n  }).then(response => {\n    if (response.status === 'ok') {// loadMainContainer()   \n    } else {\n      alert(`Server responed with error. The message is: ${response.message}`);\n    }\n  }).catch(error => alert(error));\n};\n\nlet getGetAssertionChallenge = formBody => {\n  return fetch('/webauthn/login', {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(formBody)\n  }).then(response => response.json()).then(response => {\n    if (response.status !== 'ok') throw new Error(`Server responed with error. The message is: ${response.message}`);\n    return response;\n  });\n};\n/* Handle for login form submission */\n\n\nfunction authenticationHandle(event) {\n  event.preventDefault();\n  let username = this.username.value;\n\n  if (!username) {\n    alert('Username is missing!');\n    return;\n  }\n\n  getGetAssertionChallenge({\n    username\n  }).then(response => {\n    console.log(response);\n    let publicKey = preformatGetAssertReq(response);\n    return navigator.credentials.get({\n      publicKey\n    });\n  }).then(response => {\n    console.log();\n    let getAssertionResponse = publicKeyCredentialToJSON(response);\n    return sendWebAuthnResponse(getAssertionResponse);\n  }).then(response => {\n    if (response.status === 'ok') {// loadMainContainer()   \n    } else {\n      alert(`Server responed with error. The message is: ${response.message}`);\n    }\n  }).catch(error => alert(error));\n}","map":{"version":3,"sources":["/Users/wongweijie/Citi-Hackathon/citi-ezVerify/front-end/src/WebAuthn/webauthn.auth.js"],"names":["publicKeyCredentialToJSON","generateRandomBuffer","preformatMakeCredReq","preformatGetAssertReq","getMakeCredentialsChallenge","formBody","fetch","method","credentials","headers","body","JSON","stringify","then","response","json","status","Error","message","sendWebAuthnResponse","makeCredentials","event","username","preventDefault","alert","publicKey","navigator","create","console","log","makeCredResponse","catch","error","getGetAssertionChallenge","authenticationHandle","value","get","getAssertionResponse"],"mappings":"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","sourcesContent":["'use strict';\nimport {publicKeyCredentialToJSON, generateRandomBuffer,\n    preformatMakeCredReq, preformatGetAssertReq} from './utils';\n\nlet getMakeCredentialsChallenge = (formBody) => {\n    return fetch('/webauthn/register', {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formBody)\n    })\n    .then((response) => response.json())\n    .then((response) => {\n        if(response.status !== 'ok')\n            throw new Error(`Server responed with error. The message is: ${response.message}`);\n\n        return response\n    })\n}\n\nlet sendWebAuthnResponse = (body) => {\n    return fetch('/webauthn/response', {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n    })\n    .then((response) => response.json())\n    .then((response) => {\n        if(response.status !== 'ok')\n            throw new Error(`Server responed with error. The message is: ${response.message}`);\n\n        return response\n    })\n}\n\n/* Handle for register form submission */\nexport const makeCredentials = (event, username) => {\n    event.preventDefault();\n\n    // let username = this.username.value;\n    // let name     = this.name.value;\n\n    if( !username) {\n        alert('Name or username is missing!')\n        return\n    }\n\n    getMakeCredentialsChallenge({username})\n        .then((response) => {\n            let publicKey = preformatMakeCredReq(response);\n            return navigator.credentials.create({ publicKey })\n        })\n        .then((response) => {\n            console.log(\"response: \", response);\n            let makeCredResponse = publicKeyCredentialToJSON(response);\n            return sendWebAuthnResponse(makeCredResponse)\n        })\n        .then((response) => {\n            if(response.status === 'ok') {\n                // loadMainContainer()   \n            } else {\n                alert(`Server responed with error. The message is: ${response.message}`);\n            }\n        })\n        .catch((error) => alert(error))\n}\n\nlet getGetAssertionChallenge = (formBody) => {\n    return fetch('/webauthn/login', {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formBody)\n    })\n    .then((response) => response.json())\n    .then((response) => {\n        if(response.status !== 'ok')\n            throw new Error(`Server responed with error. The message is: ${response.message}`);\n\n        return response\n    })\n}\n\n/* Handle for login form submission */\n function authenticationHandle(event) {\n    event.preventDefault();\n\n    let username = this.username.value;\n\n    if(!username) {\n        alert('Username is missing!')\n        return\n    }\n\n    getGetAssertionChallenge({username})\n        .then((response) => {\n            console.log(response)\n            let publicKey = preformatGetAssertReq(response);\n            return navigator.credentials.get({ publicKey })\n        })\n        .then((response) => {\n            console.log()\n            let getAssertionResponse = publicKeyCredentialToJSON(response);\n            return sendWebAuthnResponse(getAssertionResponse)\n        })\n        .then((response) => {\n            if(response.status === 'ok') {\n                // loadMainContainer()   \n            } else {\n                alert(`Server responed with error. The message is: ${response.message}`);\n            }\n        })\n        .catch((error) => alert(error))\n}"]},"metadata":{},"sourceType":"module"}